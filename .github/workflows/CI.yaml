name: Build Planner CI

on:
  check_run:

jobs:
  run-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # , macos-latest, windows-latest]
        python-version: ["3.10"] # , "3.11", "3.12"]

    name: Test
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest

    - name: Run pytest
      run: |
        pytest
  
  create-release:
    needs: run-tests
    if: ${{ needs.run-tests.result == 'success' }}  # Run only if run-tests job succeeded
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"  # Choose a specific Python version

    - name: Install Dependencies
      run: pip install -r requirements.txt

    - name: Create Release
      id: create_release
      run: |
        version=$(sed -n 's/.*version=\(.*\)/\1/p' buildplanner/__init__.py)
        release_folder="buildplanner_release_${version}"
        release_source="buildplanner"
        mkdir -p "${release_folder}/${release_source}"
        cp -r buildplanner/* "${release_folder}/${release_source}/"
        zip -r "${release_folder}.zip" "${release_folder}"
        echo "release_folder=${release_folder}" >> $GITHUB_ENV
        echo "release_zip=${release_folder}.zip" >> $GITHUB_ENV
        echo "::set-output name=upload_url::${{ github.event.repository.releases[0].upload_url }}"
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.release_zip }}
        asset_name: ${{ env.release_folder }}
        asset_content_type: application/zip
      if: success()  # Upload asset only if create-release step succeeds

